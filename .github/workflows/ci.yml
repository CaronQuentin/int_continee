name: CI

on:
    push:
      branches: ['main']
    pull_request:
      branches: ['main']
jobs:
    install:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 'latest'
            cache: 'npm'
        - name: Install dependencies
          run: npm ci --cache .npm --prefer-offline
    
    lint:
      runs-on: ubuntu-latest
      needs: install
      if: github.event_name == 'push' && github.ref != 'refs/tags/*' && !startsWith(github.event.head_commit.message, 'chore: release')
      steps:
        - uses: actions/checkout@v3
        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 'latest'
        - name: Run lint
          run: npm run lint
  
    only-canary:
      runs-on: ubuntu-latest
      if: env.ENV_TARGET == 'canary'
      steps:
        - uses: actions/checkout@v3
        - name: Echo Only Canary
          run: echo "Hello Only Canary!"
  
    build:
      runs-on: ubuntu-latest
      needs: lint
      steps:
        - uses: actions/checkout@v3
        - name: Set up Node.js
          uses: actions/setup-node@v3
          with:
            node-version: 'latest'
        - name: Build for production
          run: npm run build
        - uses: actions/upload-artifact@v3
          with:
            name: web
            path: ./dist
  
    build-image:
      runs-on: ubuntu-latest
      needs: build
      steps:
        - uses: actions/checkout@v3
        - uses: actions/download-artifact@v3
          with:
            name: web
            path: ./dist
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Build and push
          uses: docker/build-push-action@v3
          with:
            context: .
            push: true
            tags: valentinmontagne/nginx-web-example:latest
  
    deploy-image:
      runs-on: ubuntu-latest
      needs: build-image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: eu-west-3
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        - name: Terraform Init
          run: terraform init
        - name: Terraform Format
          run: terraform fmt -check
        - name: Terraform Plan
          run: terraform plan -input=false
        - name: Terraform Apply
          run: terraform apply -auto-approve -input=false